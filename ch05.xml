<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="ch05_sql_inj">
  <title>SQL Injection</title>
  <para><indexterm><primary>SQL Injection</primary></indexterm>SQL Injection is the scourge of database programming. The vulnerability is a server-side injection attack and occurs when the attacker inserts malicious code into SQL query. OWASP and ESAPI do not supply controls for SQL Injections. Rather, you use the controls provided by the platform you are working on.</para>
  <section id="sql_inj_documentation" xreflabel="PreparedStatement Documentation">
    <title>Documentation</title>
    <para><indexterm><primary>SQL Injection</primary><secondary>Documentation</secondary></indexterm><indexterm><primary>SQL Injection</primary><secondary>PreparedStatement</secondary></indexterm>Documentation for Java <systemitem>PreparedStatement</systemitem> class is located at <ulink url="https://docs.oracle.com/javase/8/docs/api/index.html?java/sql/PreparedStatement.html">Interface PreparedStatement</ulink>.</para>
    <para><indexterm><primary>SQL Injection</primary><secondary>CallableStatement</secondary></indexterm>Documentation for Java <systemitem>CallableStatement</systemitem> class is located at <ulink url="https://docs.oracle.com/javase/8/docs/api/java/sql/CallableStatement.html">Interface CallableStatement</ulink>.</para>
    <para><indexterm><primary>SQL Injection</primary><secondary>ParameterizedQuery</secondary></indexterm>Documentation for .Net <systemitem>SqlCommand</systemitem> class is located at <ulink url="https://learn.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlcommand">SqlCommand Class</ulink>.</para>
    <para><indexterm><primary>SQL Injection</primary><secondary>OleDbCommand</secondary></indexterm>Documentation for .Net <systemitem>OleDbCommand Class</systemitem> class is located at <ulink url="https://learn.microsoft.com/en-us/dotnet/api/system.data.oledb.oledbcommand">OleDbCommand Class</ulink> and <ulink url="https://learn.microsoft.com/en-us/dotnet/api/system.data.odbc.odbcparameter">OdbcParameter Class</ulink>.</para>
    <para><indexterm><primary>SQL Injection</primary><secondary>OdbcCommand</secondary></indexterm>Documentation for .Net <systemitem>OdbcCommand Class</systemitem> class is located at <ulink url="https://learn.microsoft.com/en-us/dotnet/api/system.data.odbc.odbccommand">OdbcCommand Class</ulink> and <ulink url="https://learn.microsoft.com/en-us/dotnet/api/system.data.oledb.oledbparameter">OdbcParameter Class</ulink>.</para>
    <para><indexterm><primary>SQL Injection</primary><secondary>EntityCommand</secondary></indexterm>Documentation for .Net <systemitem>EntityCommand Class</systemitem> class is located at <ulink url="https://learn.microsoft.com/en-us/dotnet/api/system.data.entityclient.entitycommand">EntityCommand Class</ulink> and <ulink url="https://learn.microsoft.com/en-us/dotnet/api/system.data.entityclient.entityparameter">EntityCommand Class</ulink>.</para>
    <para><indexterm><primary>SQL Injection</primary><secondary>SqliteCommand</secondary></indexterm>Documentation for .Net <systemitem>SqliteCommand Class</systemitem> class is located at <ulink url="https://learn.microsoft.com/en-us/dotnet/api/microsoft.data.sqlite.sqlitecommand">SqliteCommand Class</ulink> and <ulink url="https://learn.microsoft.com/en-us/dotnet/api/microsoft.data.sqlite.sqliteparameter">SqliteCommand Class</ulink>.</para>
    <para>OWASP provides a SQL Injection cheat sheet at <ulink url="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html">SQL Injection Prevention Cheat Sheet</ulink>.</para>
  </section>
  <section id="sql_inj_strategy">
    <title>Strategy</title>
    <para><indexterm><primary>SQL Injection</primary><secondary>Strategy</secondary></indexterm>The primary defense against SQL Injections are Prepared Statements or Parameterized Queries. Prepared Statements and Parameterized Queries bind user data in <indexterm><primary>SQL Injection</primary><secondary>Bind variables</secondary></indexterm><indexterm><primary>Bind variables</primary></indexterm>bind variables. Once bound, the underlying database engine will not unintentionally execute the user supplied data as code.<footnote><para>Bind variables can make the code execute faster by reducing queries in the cache. Also see <ulink url="https://blogs.oracle.com/sql/post/improve-sql-query-performance-by-using-bind-variables">Improve SQL Query Performance by Using Bind Variables</ulink></para></footnote></para>
    <para>A secondary defense against SQL Injections is encoding dangerous characters so the attacker supplied data is not interpreted as code by the underlying database engine. Encoding is an anti-pattern and should not be used. Instead, you should bind the user supplied data using Prepared Statements or Parameterized Queries.</para>
    <para>Encoding translates dangerous characters into a benign representations for storage in a database. The table below shows safe ways to encode dangerous characters.</para>
    <table frame="all">
      <title>Safe Encoding of Dangerous SQL Characters</title>
      <tgroup cols="3" align="center" colsep="1" rowsep="1">
        <colspec colnum="1" colname="character" colwidth="1*"/>
        <colspec colnum="2" colname="encoding" colwidth="1*"/>
        <colspec colnum="3" colname="comment" colwidth="1*"/>
        <thead>
          <row>
            <entry>Character</entry>
            <entry>Encoding</entry>
            <entry>Comment</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>' (single quote)</entry>
            <entry>''</entry>
            <entry>Single quote espaced with a single quote</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section id="sql_inj_chinook_db" xreflabel="Chinook Database">
    <title>Chinook Database</title>
    <para><indexterm><primary>Chinook</primary></indexterm><ulink url="https://github.com/lerocha/chinook-database">The Chinook database</ulink> is a sample database available for SQL Server, Oracle, MySQL, and SQLite. Chinook is the free/open source software equivalent to Microsoft's Northwind database.</para>
    <para>The Chinook database is used in the samples for this chapter. A partial output of Chinook's table schema is reproduced below. Notice the <systemitem>Customer</systemitem> and <systemitem>Employee</systemitem> table schemas are similar. The similarity will be abused later under <xref linkend="sql_inj_dynamic_query"/>.</para>
    <example id="sql_inj_chinook_schema" xreflabel="Chinook Database Schema">
      <title>Chinook Database Schema</title>
      <programlisting><?code-font-size 75% ?>$ sqlite3 Chinook.sqlite
sqlite&gt; .tables
Album          Employee       InvoiceLine    PlaylistTrack
Artist         Genre          MediaType      Track
Customer       Invoice        Playlist

sqlite&gt; .schema Album
CREATE TABLE [Album]
(
    [AlbumId] INTEGER  NOT NULL,
    [Title] NVARCHAR(160)  NOT NULL,
    [ArtistId] INTEGER  NOT NULL,
    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),
    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId])
                ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE INDEX [IFK_AlbumArtistId] ON [Album] ([ArtistId]);

sqlite&gt; .schema Artist
CREATE TABLE [Artist]
(
    [ArtistId] INTEGER  NOT NULL,
    [Name] NVARCHAR(120),
    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])
);

sqlite&gt; .schema Customer
CREATE TABLE [Customer]
(
    [CustomerId] INTEGER  NOT NULL,
    [FirstName] NVARCHAR(40)  NOT NULL,
    [LastName] NVARCHAR(20)  NOT NULL,
    [Company] NVARCHAR(80),
    [Address] NVARCHAR(70),
    [City] NVARCHAR(40),
    [State] NVARCHAR(40),
    [Country] NVARCHAR(40),
    [PostalCode] NVARCHAR(10),
    [Phone] NVARCHAR(24),
    [Fax] NVARCHAR(24),
    [Email] NVARCHAR(60)  NOT NULL,
    [SupportRepId] INTEGER,
    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),
    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId])
                ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE INDEX [IFK_CustomerSupportRepId] ON [Customer] ([SupportRepId]);

sqlite&gt; .schema Employee
CREATE TABLE [Employee]
(
    [EmployeeId] INTEGER  NOT NULL,
    [LastName] NVARCHAR(20)  NOT NULL,
    [FirstName] NVARCHAR(20)  NOT NULL,
    [Title] NVARCHAR(30),
    [ReportsTo] INTEGER,
    [BirthDate] DATETIME,
    [HireDate] DATETIME,
    [Address] NVARCHAR(70),
    [City] NVARCHAR(40),
    [State] NVARCHAR(40),
    [Country] NVARCHAR(40),
    [PostalCode] NVARCHAR(10),
    [Phone] NVARCHAR(24),
    [Fax] NVARCHAR(24),
    [Email] NVARCHAR(60),
    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),
    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId])
                ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE INDEX [IFK_EmployeeReportsTo] ON [Employee] ([ReportsTo]);</programlisting>
    </example>
  </section>
  <section id="sql_inj_vulnerable_query" xreflabel="Vulnerable Query">
    <title>Vulnerable Query</title>
    <para>An example of a vulnerable query is shown below. The code is vulnerable due to simple concatenation without any controls on the user supplied input.</para>
    <example id="sql_inj_ex_vulnerable_query" xreflabel="Vulnerable Query, Pwned">
      <title>Vulnerable Query, Pwned</title>
      <programlisting><?code-font-size 75% ?>String lastName = request.getParameter("lastName");

String query = "SELECT FirstName,LastName FROM Customer WHERE LastName = " + lastName;
Statement statement = connection.createStatement(...);

ResultSet results = statement.executeQuery(query);</programlisting>
    </example>
  </section>
  <section id="sql_inj_prepared_statement" xreflabel="Prepared Statements">
    <title>Prepared Statements</title>
    <para><indexterm><primary>SQL Injection</primary><secondary>PreparedStatement</secondary></indexterm><indexterm><primary>PreparedStatement</primary></indexterm>Prepared Statements are used in Java as the primary defense against SQL injections. A <systemitem>PreparedStatement</systemitem> is a precompiled SQL statement with placeholders for for user supplied or attacker controlled data. Java uses the question mark (<systemitem>?</systemitem>) as a placeholder for the data.</para>
    <para>An example of a Prepared Statement is shown below. The Prepared Statement is not vulnerable to a SQL Injection because the user supplied data is not interpreted as code.</para>
    <example id="sql_inj_ex_prepared_statement_java" xreflabel="Prepared Statement">
      <title>Prepared Statement, Java</title>
      <programlisting><?code-font-size 75% ?>String lastName = request.getParameter("lastName");
String query = "SELECT FirstName,LastName FROM Customer WHERE LastName = ?";

PreparedStatement command = connection.prepareStatement(query);
command.setString(1, lastName);

ResultSet results = command.executeQuery( );</programlisting>
    </example>
    <para>It is possible to use a Prepared Statement, and still be vulnerable to a SQL Injection attack. The example below shows an insecure query based on a Prepared Statement.</para>
    <example id="sql_inj_ex_prepared_statement_java_bad" xreflabel="Incorrect Prepared Statement">
      <title>Incorrect Prepared Statement, Java</title>
      <programlisting><?code-font-size 75% ?>String tableName = request.getParameter("tableName");
String lastName = request.getParameter("lastName");
String query = "SELECT FirstName,LastName FROM " + tableName + " WHERE LastName = ?";

PreparedStatement command = connection.prepareStatement(query);
command.setString(1, lastName);

ResultSet results = command.executeQuery( );</programlisting>
    </example>
    <para>The problem with <xref linkend="sql_inj_ex_prepared_statement_java_bad"/> is, <systemitem>tableName</systemitem> is not bound in the Prepared Statement. Rather, it is concatenated like in <xref linkend="sql_inj_ex_vulnerable_query"/>. In fact, the variable <systemitem>tableName</systemitem> cannot be bound because table names and column names cannot be bound. The problem is discussed in detail in <xref linkend="sql_inj_dynamic_query"/>.</para>
  </section>
  <section id="sql_inj_callable_statement" xreflabel="Callable Statements">
    <title>Callable Statements</title>
    <para><indexterm><primary>SQL Injection</primary><secondary>CallableStatement</secondary></indexterm><indexterm><primary>CallableStatement</primary></indexterm>Callable Statements along with parameter binding are used to defend against SQL Injections in <indexterm><primary>SQL Injection</primary><secondary>Stored Procedure</secondary></indexterm><indexterm><primary>Stored Procedure</primary></indexterm>Stored Procedures. An example of a Callable Statement is shown below. The Callable Statements is not vulnerable to a SQL Injection because the user supplied data is not interpreted as code.</para>
    <example id="sql_inj_ex_callable_statement_java" xreflabel="Callable Statement">
      <title>Callable Statement, Java</title>
      <programlisting><?code-font-size 75% ?>String lastName = request.getParameter("lastName");

CallableStatement statement = connection.prepareCall("{call sp_getCustomerName(?, ?)}");
statement.setString(1, lastName);

statement.registerOutParameter(1, Types.NVARCHAR);
statement.registerOutParameter(2, Types.NVARCHAR);

ResultSet results = statement.executeQuery();</programlisting>
    </example>
    <para>The SQL code for <systemitem>sp_getCustomerName</systemitem> would look similar to below. The definitions for <systemitem>lastName</systemitem> and <systemitem>firstName</systemitem> are taken from <xref linkend="sql_inj_chinook_schema"/>.</para>
    <programlisting><?code-font-size 75% ?>CREATE PROCEDURE sp_getCustomerName(INOUT lastName NVARCHAR(20), \
                                    OUT  firstName NVARCHAR(40))
BEGIN
    SELECT LastName, FirstName
    INTO lastName, firstName
    FROM Customer
    WHERE LastName = lastName;
END</programlisting>
    <para>If you want to use a Callable Statement outside a Stored Procedure in Java, then you should use <xref linkend="sql_inj_prepared_statement"/> instead.</para>
  </section>
  <!-- Parameterized Query -->
  <section id="sql_inj_parameterized_query" xreflabel="Parameterized Queries">
    <title>Parameterized Queries</title>
    <!-- https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ado-net-code-examples -->
    <para><indexterm><primary>SQL Injection</primary><secondary>ParameterizedQuery</secondary></indexterm><indexterm><primary>ParameterizedQuery</primary></indexterm>Parameterized Queries are used in .Net as the primary defense against SQL injections. .Net provides multiple classes of interest for Parameterized Queries based on data source providers. The classes include <systemitem>SqlCommand</systemitem>, <systemitem>OleDbCommand</systemitem>, <systemitem>OdbcCommand</systemitem>, <systemitem>EntityCommand</systemitem> and <systemitem>SqliteCommand</systemitem>. An additional data source, <systemitem>OracleClient</systemitem>, is deprecated.</para>
    <para>Whether a class supports placeholders depends on the data source provider. The table below shows data source providers and whether it supports placeholders. Also see <ulink url="https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/configuring-parameters-and-parameter-data-types">Working with parameter placeholders</ulink>.</para>
    <table frame="all">
      <title>Syntax for Parameter Placeholders </title>
      <tgroup cols="2" align="center" colsep="1" rowsep="1">
        <colspec colnum="1" colname="provider" colwidth="2*"/>
        <colspec colnum="2" colname="syntax" colwidth="3*"/>
        <thead>
          <row>
            <entry>Data provider</entry>
            <entry>Naming Syntax</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>System.Data.SqlClient</entry>
            <entry>Named parameters in the format <systemitem>@paramname</systemitem></entry>
          </row>
          <row>
            <entry>System.Data.OleDb</entry>
            <entry>Positional parameter markers indicated by a <systemitem>?</systemitem> (question mark)</entry>
          </row>
          <row>
            <entry>System.Data.Odbc</entry>
            <entry>Positional parameter markers indicated by a <systemitem>?</systemitem> (question mark)</entry>
          </row>
          <row>
            <entry>System.Data.EntityClient</entry>
            <entry>Named parameters in the format <systemitem>@paramname</systemitem></entry>
          </row>
          <row>
            <entry>Microsoft.Data.Sqlite</entry>
            <entry>Named parameters in the format <systemitem>@paramname</systemitem></entry>
          </row>
          <row>
            <entry>System.Data.OracleClient</entry>
            <entry>Named parameters in the format <systemitem>:paramname</systemitem></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para><indexterm><primary>SQL Injection</primary><secondary>SqlCommand</secondary></indexterm><indexterm><primary>SqlCommand</primary></indexterm>A <systemitem>SqlCommand</systemitem> is a precompiled SQL statement which uses named parameters for attacker controlled data. An example of a Parameterized Query is shown below.</para>
    <!-- https://learn.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlcommand.parameters -->
    <example id="sql_inj_ex_parameterized_query_dotnet">
      <title>Parameterized Query, SqlCommand, .Net</title>
      <programlisting><?code-font-size 75% ?>String lastName = request.getParameter("lastName");
String query = "SELECT FirstName,LastName FROM Customer WHERE LastName = @LNAME";

SqlCommand command = new SqlCommand(query, connection);
command.Parameters.Add("@LNAME", SqlDbType.Text);
command.Parameters["@LNAME"].Value = lastName;

ResultSet results = command.executeQuery( );</programlisting>
    </example>
    <para><indexterm><primary>SQL Injection</primary><secondary>OleDbCommand</secondary></indexterm><indexterm><primary>OleDbCommand</primary></indexterm><indexterm><primary>SQL Injection</primary><secondary>OleDbParameter</secondary></indexterm><indexterm><primary>OleDbParameter</primary></indexterm>You can also use <systemitem>OleDbCommand</systemitem> to bind parameters in .Net. The code below shows an example of using <systemitem>OleDbCommand</systemitem> and <systemitem>OleDbParameter</systemitem>.</para>
    <!-- https://learn.microsoft.com/en-us/dotnet/api/system.data.oledb.oledbparameter -->
    <example id="sql_inj_ex_oledb_command_dotnet">
      <title>Parameterized Query, OleDbCommand, .Net</title>
      <programlisting><?code-font-size 75% ?>String lastName = request.getParameter("lastName");
String query = "SELECT FirstName,LastName FROM Customer WHERE LastName = ?";

OleDbCommand command = new OleDbCommand(query, connection);
command.Parameters.Add("@p1", SqlDbType.Text);
command.Parameters["@p1"].Value = lastName;

OleDbDataReader results = command.executeQuery( );</programlisting>
    </example>
    <para><indexterm><primary>SQL Injection</primary><secondary>EntityCommand</secondary></indexterm><indexterm><primary>EntityCommand</primary></indexterm><indexterm><primary>SQL Injection</primary><secondary>EntityParameter</secondary></indexterm><indexterm><primary>EntityParameter</primary></indexterm>You can also use <systemitem>EntityCommand</systemitem> to bind parameters in .Net. The code below shows an example of using <systemitem>EntityCommand</systemitem> and <systemitem>EntityParameter</systemitem>.</para>
    <!-- https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/how-to-execute-a-parameterized-entity-sql-query-using-entitycommand -->
    <example id="sql_inj_ex_entity_command_dotnet">
      <title>Parameterized Query, EntityCommand, .Net</title>
      <programlisting><?code-font-size 75% ?>String lastName = request.getParameter("lastName");
String query = "SELECT FirstName,LastName FROM Customer WHERE LastName = @LNAME";

EntityParameter param = new EntityParameter();
param.ParameterName = "LNAME";
param.Value = lastName;

EntityCommand command =  new EntityCommand(query, connection);
command.Parameters.Add(param);

EntityDataReader results = command.executeReader( );</programlisting>
    </example>
    <para><indexterm><primary>SQL Injection</primary><secondary>SqliteCommand</secondary></indexterm><indexterm><primary>SqliteCommand</primary></indexterm><indexterm><primary>SQL Injection</primary><secondary>SqliteParameter</secondary></indexterm><indexterm><primary>SqliteParameter</primary></indexterm>You can also use <systemitem>SqliteCommand</systemitem> to bind parameters in .Net. The code below shows an example of using <systemitem>SqliteCommand</systemitem> and <systemitem>SqliteParameter</systemitem>.</para>
    <!-- https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/how-to-execute-a-parameterized-entity-sql-query-using-entitycommand -->
    <example id="sql_inj_ex_sqlite_command_dotnet">
      <title>Parameterized Query, SqliteCommand, .Net</title>
      <programlisting><?code-font-size 75% ?>String lastName = request.getParameter("lastName");
String query = "SELECT FirstName,LastName FROM Customer WHERE LastName = @LNAME";

SqliteParameter param = new SqliteParameter();
param.ParameterName = "LNAME";
param.Value = lastName;

SqliteCommand command =  new SqliteCommand(query, connection);
command.Parameters.Add(param);

SqliteDataReader results = command.executeReader( );</programlisting>
    </example>
  </section>
  <section id="sql_inj_encoding">
    <title>Encoding</title>
    <para>.</para>
  </section>
  <section id="sql_inj_dynamic_query">
    <title>Dynamic Query</title>
    <para><indexterm><primary>SQL Injection</primary><secondary>Dynamic Query</secondary></indexterm><indexterm><primary>Dynamic Query</primary></indexterm>Dynamic queries refers to the technique of selecting table names and column names at runtime rather than using static queries declared at compile time. Dynamic queries select the table names or column names and incorporate them using concatenation to build the SQL query at runtime. The problem with dynamic queries is, you cannot bind a table name or column name in a Prepared Statement or Parameterized Query.</para>
    <para>Your primary defense in dynamic query is to avoid the technique in the first place. You should redesign your program and avoid the dynamic query.</para>
    <para>An application that builds a dynamic query on a table name and column names at runtime might look like below.</para>
    <example id="sql_inj_ex_dyn_query_bad_1">
      <title>Dynamic Query, Table Name, Pwned</title>
      <programlisting><?code-font-size 75% ?>String tableName = request.getParameter("tableName");
String column1 = request.getParameter("column1");
String column2 = request.getParameter("column2");
String search = request.getParameter("search");

Connection connection = DriverManager.getConnection("jdbc:sqlite:Chinook.sqlite");
String query = "SELECT " + column1 + "," + column2 + " FROM " + tableName +
               " WHERE " + column2 + " LIKE '" + search + "%'";

Statement statement = connection.createStatement();
ResultSet results = statement.executeQuery(query);

while (results.next())
{
    System.out.println(results.getString(column1) + " " +
                       results.getString(column2));
}</programlisting>
    </example>
    <para>The program allows the user to match an exact Customer last name (like "Brooks") or a stem (like "Br*"). And suppose the app uses a URI similar to <systemitem>https://www.example.com/query?tableName=Customer&amp;column1=FirstName&amp;column2=LastName&amp;search=Br</systemitem>.</para>
    <para>Running the program from the command line results in output shown below. The command line version uses <systemitem>args[0]</systemitem> and <systemitem>args[1]</systemitem> instead of <systemitem>request.getParameter(paramname)</systemitem>.</para>
    <programlisting><?code-font-size 75% ?>$ java -cp "$(pwd):sqlite-jdbc-3.42.0.0.jar" DataTest Customer FirstName LastName Br
List of Customers matching Br*
Michelle Brooks
Robert Brown</programlisting>
    <para>A clever attacker can take advantage of the dynamic query, and use Employee table instead of the Customer table. Additionally, the attacker can use an underscore character (<systemitem>_</systemitem>) to match any character in the first position. The result of an attack would reveal all company employees in the database.</para>
    <programlisting><?code-font-size 75% ?>$ java -cp "$(pwd):sqlite-jdbc-3.42.0.0.jar" DataTest Employee FirstName LastName _
List of Employees matching _*
Andrew Adams
Nancy Edwards
Jane Peacock
Margaret Park
Steve Johnson
Michael Mitchell
Robert King
Laura Callahan</programlisting>
    <para>A defense when using dynamic queries on table names and column names is validation, but it is a weak security control at best. Adding a validation method to filter-out table names with 'Employee' may fix this particular instance problem, but it does not address the class of problems caused by dynamic queries.</para>
    <programlisting><?code-font-size 75% ?>protected static String validateTableName(String tableName)
{
    final String validTableNames[] = {
        "Album", "Artist", "Customer", "Genre", "Invoice", "InvoiceLine",
        "MediaType", "Playlist", "PlaylistTrack", "Track"
    };

    if (Arrays.binarySearch(validTableNames, tableName) &lt; 0)
        throw new IllegalArgumentException("Table name " + tableName + " is not valid");

    return tableName;
}</programlisting>
    <para>Running the program with the validator will result in an exception if an attacker attempts to use the Employee table.</para>
    <programlisting><?code-font-size 75% ?><?code-font-size 75% ?>$ java -cp "$(pwd):sqlite-jdbc-3.42.0.0.jar" DataTest Employee FirstName LastName _
java.lang.IllegalArgumentException: Table name Employee is not valid</programlisting>
    <para>Unfortunately, <systemitem>validateTableName</systemitem> will be an incomplete remediation because it continues to allow other restricted table names, like  Invoice and InvoiceLine. The complete solution is to statically declare the query and use a Prepared Statement or Parameterized Query to bind the user input.</para>
    <para>A modified program is shown below, and it uses <systemitem>queryId</systemitem> and <systemitem>case</systemitem> statement to take control of the query string and leverage a Prepared Statement. The the app uses a URI similar to <systemitem>https://www.example.com/query?queryId=XU746BVVA7VXCBOZ7JZA&amp;search=Br</systemitem>. The queries are statically declared, the attacker never controls the table name or column names, and the values the attacker controls are bound in a Prepared Statement.</para>
    <example id="sql_inj_ex_dyn_query_ok">
      <title>Dynamic Query, Prepared Statement</title>
      <programlisting><?code-font-size 75% ?>String queryId = request.getParameter("queryId");
String search = request.getParameter("search");

Connection connection = DriverManager.getConnection("jdbc:sqlite:Chinook.sqlite");
PreparedStatement statement = null;

switch (queryId)
{
    case "XU746BVVA7VXCBOZ7JZA":
        String query = "SELECT FirstName,LastName FROM Customer WHERE LastName LIKE ?";
        statement = connection.prepareStatement(query);
        statement.setString(1, search+"%");
        break;
    default:
        throw new IllegalArgumentException("Query Id " + queryId + " is not valid");
}

ResultSet results = statement.executeQuery();
</programlisting>
    </example>
    <para>One final note, the <systemitem>queryId</systemitem> is a 12-byte or 96-bit random value from a uniform distribution. The <systemitem>queryId</systemitem> was generated from <systemitem>/dev/urandom</systemitem>. The string is not case sensitive because it uses the Base32 alphabet.</para>
    <programlisting><?code-font-size 75% ?>$ head -c 12 /dev/urandom | base32 | sed 's/=//g'
XU746BVVA7VXCBOZ7JZA</programlisting>
  </section>
</chapter>
