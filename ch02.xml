<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="ch02_input_validation">
  <title>Input Validation</title>
  <para><indexterm><primary>Validation</primary></indexterm>User input should be validated before your webapp consumes the data. This chapter of the book will show you how to use OWASP and ESAPI controls to assist in validating user data.</para>
  <section id="input_validation" xreflabel="Input Validation">
    <title>Input Validation</title>
    <para><indexterm><primary>Input Validation</primary><secondary>Documentation</secondary></indexterm>Validating user input to ensure in conforms to a particular specification is a cornerstone to many developer tasks. A developer will encounter many forms of data, including names, numbers, social security numbers, credit card numbers, and dates. ESAPI provides the <systemitem>Validator</systemitem> class to help with the task.</para>
  </section>
  <section id="input_validation_documentation" xreflabel="Validator Documentation">
    <title>Documentation</title>
    <para><indexterm><primary>Input Validation</primary></indexterm>Documentation for ESAPI <systemitem>Validator</systemitem> class is located at <ulink url="https://www.javadoc.io/static/org.owasp.esapi/esapi/2.5.2.0/index.html?org/owasp/esapi/Validator.html">Interface Validator</ulink>.</para>
  </section>
  <!-- Keep this in sync with the test in ch04 -->
  <section id="input_validation_canonicalize">
    <title>Canonicalization</title>
    <para><indexterm><primary>Canonicalization</primary></indexterm>Sometimes you will need to use an ESAPI control on a value, but the value may already be encoded. To avoid double encoding you can call <systemitem>canonicalize</systemitem> to normalize a value <emphasis>before</emphasis> input validation and encoding. Encoding is covered in <xref linkend="ch04_xss"/>.</para>
    <example id="input_validation_ex_canonicalize_esapi">
      <title>Canonicalization, ESAPI Encoder</title>
      <programlisting><?code-font-size 75% ?>String UNTRUSTED = request.getParameter("SomeParameter");
UNTRUSTED = ESAPI.encoder().canonicalize(UNTRUSTED);
...
String encoded = ESAPI.encoder().encodeForURL(UNTRUSTED);</programlisting>
    </example>
    <para>If you have to call <systemitem>canonicalize</systemitem> multiple times, then it could be an attacker supplying data already encoded to evade detection. If you find you need to call <systemitem>canonicalize</systemitem>, then consider returning an error. Don't allow an attacker to have multiple attempts on your code.</para>
  </section>
</chapter>
